#!/usr/bin/env python

import json
import subprocess
import time

import click
import dotenv
import requests

dotenv.load_dotenv()

DEFAULT_APP_CHECK_INTERVAL = 2
DEFAULT_APP_CHECK_TIMEOUT = 20

DEFAULT_BUILD_CHECK_INTERVAL = 20

DEFAULT_SSH_CHECK_INTERVAL = 3
DEFAULT_SSH_CHECK_TIMEOUT = 15

GCP_REPO = "gcr.io/notme-330419/notme-elixir"

@click.group()
def cli():
    pass


@click.command()
@click.option("--project", default=None, required=True, help="gcp project name")
@click.option("--sha", default="", required=False, help="git repo sha or tag")
@click.pass_context
def build(ctx, project: str, sha: str):
    time_start_unix = time.time()

    build_id = _gcp_build_trigger(project=project, sha=sha)
    build_status = _gcp_build_poll(project=project, id=build_id, states=["error", "success"])

    time_end_unix = time.time()
    time_mins = round((time_end_unix - time_start_unix) / 60, 1)

    if build_status not in ["success"]:
        _print_error(f"build {build_id} {build_status}, completed in {time_mins} mins")
        exit(1)

    _print_ok(f"build {build_id} {build_status}, completed in {time_mins} mins")


@click.command()
@click.option("--host", default=None, required=True, help="gcp host or ip address")
@click.option("--user", default="", required=False, help="gcp ssh username")
@click.option("--site", default="https://www.notme.one", required=False, help="site uri")
@click.pass_context
def deploy(ctx, host: str, user: str, site: str):

    time_start_unix = time.time()

    print(f"host {host} check", end=" ... ", flush=True)

    timeout = 0
    while timeout < DEFAULT_SSH_CHECK_TIMEOUT:
        code = _host_check(host=host, user=user)
        if code == 0:
            break
        time.sleep(DEFAULT_SSH_CHECK_INTERVAL)
        timeout += DEFAULT_SSH_CHECK_INTERVAL

    _print_ok(f"ok, {code}")

    print(f"host {host} scp files", end=" ... ", flush=True)

    _host_scp_files(host=host, user=user, dir="elixir", files=[".env.db.prod", ".env.prod"])

    _print_ok("ok")

    print(f"host {host} docker network", end=" ... ", flush=True)

    _docker_network_create(host=host, user=user)

    _print_ok("ok")

    print(f"host {host} docker login", end=" ... ", flush=True)

    _docker_login(host=host, user=user)

    _print_ok("ok")

    print(f"host {host} docker postgres start", end=" ... ", flush=True)

    _docker_postgres_start(host=host, user=user)
    _print_ok("ok")

    print(f"host {host} docker postgres wait", end=" ... ", flush=True)
    time.sleep(10)
    _print_ok("ok")

    print(f"host {host} docker app db migrate", end=" ... ", flush=True)

    _docker_app_db_migrate(host=host, user=user)

    _print_ok("ok")

    print(f"host {host} docker app pull", end=" ... ", flush=True)

    _docker_app_pull(host=host, user=user)

    _print_ok("ok")

    print(f"host {host} docker app start", end=" ... ", flush=True)

    _docker_app_restart(host=host, user=user)

    _print_ok("ok")

    print(f"ping {site}", end=" ... ", flush=True)

    timeout = 0
    while timeout < DEFAULT_APP_CHECK_TIMEOUT:
        try:
            r = requests.get(f"{site}/me")
            if (code := r.status_code) in [0, 200]:
                break
        except Exception:
            code = 500
        time.sleep(DEFAULT_APP_CHECK_INTERVAL)
        timeout += DEFAULT_APP_CHECK_INTERVAL

    if code not in [0, 200]:
        _print_error(f"error {code}")
        exit(code)

    _print_ok(f"ok, {code}")

    time_end_unix = time.time()
    time_secs = round((time_end_unix - time_start_unix), 1)

    _print_ok(f"host {host} deploy completed in {time_secs} secs")


def _docker_app_db_migrate(host: str, user: str) -> int:
    response = subprocess.run(
        f"ssh -t {user}@{host} 'sudo docker run --name elixir-migrate-prd --network notme --rm --env-file ./elixir/.env.prod {GCP_REPO}:latest /app/bin/migrate'",
        shell=True,
        capture_output=True,
    )

    if response.returncode not in [0]:
        _print_error(response.stdout.decode("utf-8"))
        exit(response.returncode)

    return response.returncode


def _docker_app_pull(host: str, user: str) -> int:
    response = subprocess.run(
        f"ssh -t {user}@{host} 'sudo docker image pull {GCP_REPO}:latest'",
        shell=True,
        capture_output=True,
    )

    if response.returncode not in [0]:
        _print_error(response.stdout.decode("utf-8"))
        exit(response.returncode)

    return response.returncode


def _docker_app_restart(host: str, user: str) -> int:
    apps = ["elixir-migrate-prd", "elixir-prd"]

    for app in apps:
        response = subprocess.run(
            f"ssh -t {user}@{host} 'sudo docker stop {app}'",
            shell=True,
            capture_output=True,
        )

        if response.returncode not in [0, 1]: # 1 means container not running
            _print_error(response.stdout.decode("utf-8"))
            exit(response.returncode)

    return _docker_app_start(host=host, user=user)


def _docker_app_start(host: str, user: str) -> int:
    response = subprocess.run(
        f"ssh -t {user}@{host} 'sudo docker run --name elixir-prd --network notme -d --rm -p 4000:4000 --env-file ./elixir/.env.prod {GCP_REPO}:latest'",
        shell=True,
        capture_output=True,
    )

    if response.returncode != 0:
        _print_error(response.stdout.decode("utf-8"))
        exit(response.returncode)

    return response.returncode


def _docker_login(host: str, user: str) -> int:
    response = subprocess.run(
        f"ssh -t {user}@{host} 'gcloud auth print-access-token | sudo docker login -u oauth2accesstoken --password-stdin gcr.io'",
        shell=True,
        capture_output=True,
    )

    if response.returncode != 0:
        _print_error(response.stdout.decode("utf-8"))
        exit(response.returncode)

    return response.returncode


def _docker_network_create(host: str, user: str) -> int:
    response = subprocess.run(
        f"ssh -t {user}@{host} 'sudo docker network create --driver bridge notme'",
        shell=True,
        capture_output=True,
    )

    if response.returncode not in [0,1]: # 1 means network already created
        _print_error(response.stdout.decode("utf-8"))
        exit(response.returncode)

    return response.returncode


def _docker_postgres_start(host: str, user: str) -> int:
    response = subprocess.run(
        f"ssh -t {user}@{host} 'sudo docker run --name postgres-prd --network notme -d --rm --env-file ./elixir/.env.db.prod postgis/postgis:16-3.4'",
        shell=True,
        capture_output=True,
    )

    if response.returncode not in [0, 125]: # 125 means container already started
        _print_error(response.stdout.decode("utf-8"))
        exit(response.returncode)

    return response.returncode


def _gcp_build_poll(project: str, id: str, states: list[str]) -> str:
    cmd = f"gcloud builds describe {id} --format=json"
    
    while True:
        result = subprocess.run(cmd.split(" "), check=True, capture_output=True)
        result_dict = json.loads(result.stdout.decode("utf-8"))
        build_status = result_dict.get("status", "error").lower()

        _print_status(f"gcp build id {id} - status {build_status} ...")

        # check for terminal state
        if build_status in states:
            return build_status

        time.sleep(DEFAULT_BUILD_CHECK_INTERVAL)


def _gcp_build_trigger(project: str, sha: str) -> str:
    print(f"gcp build trigger project '{project}'", end=" ... ")

    cmd = f"gcloud builds triggers run {project} --format=json"

    result = subprocess.run(cmd.split(" "), check=True, capture_output=True)
    result_dict = json.loads(result.stdout.decode("utf-8"))
    build_id = result_dict.get("metadata").get("build").get("id")

    _print_ok(f"ok, created {build_id}")

    return build_id


def _host_check(host: str, user: str) -> int:
    ssh_code = subprocess.run(
        f"ssh -t {user}@{host} 'ls'",
        shell=True,
        capture_output=True,
    ).returncode

    return ssh_code


def _host_reboot(host: str, user: str) -> int:
    ssh_code = subprocess.run(
        f"ssh -t {user}@{host} 'sudo reboot'",
        shell=True,
    ).returncode

    return ssh_code


def _host_scp_files(host: str, user: str, dir: str, files: list[str]) -> int:
    scp_code = subprocess.run(
        f"ssh -t {user}@{host} 'mkdir -p {dir}'",
        shell=True,
        capture_output=True,
    ).returncode

    if scp_code not in [0]:
        exit(scp_code)

    for file in files:
        scp_code = subprocess.run(
            f"scp {file} {user}@{host}:{dir}/{file}",
            shell=True,
            capture_output=True,
        ).returncode

        if scp_code != 0:
            return scp_code

    return 0


def _print_error(s: str):
    print("\x1b[1;31m" + s + "\x1b[0m", flush=True)


def _print_ok(s: str):
    print("\x1b[1;32m" + s + "\x1b[0m", flush=True)


def _print_status(s: str):
    print("\x1b[1;36m" + s + "\x1b[0m", flush=True)


cli.add_command(build)
cli.add_command(deploy)

if __name__ == "__main__":
    cli()