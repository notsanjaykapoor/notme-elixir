#!/usr/bin/env python

import json
import subprocess
import time

import click
import dotenv


dotenv.load_dotenv()


DEFAULT_BUILD_CHECK_INTERVAL = 20
DEFAULT_SSH_CHECK_INTERVAL = 3
DEFAULT_SSH_CHECK_TIMEOUT = 15

@click.group()
def cli():
    pass

@click.command()
@click.option("--project", default=None, required=True, help="gcp project name")
@click.option("--sha", default="", required=False, help="git repo sha or tag")
@click.pass_context
def build(ctx, project: str, sha: str):
    time_start_unix = time.time()

    build_id = _gcp_build_trigger(project=project, sha=sha)
    build_status = _gcp_build_poll(project=project, id=build_id)

    time_end_unix = time.time()
    time_mins = round((time_end_unix - time_start_unix) / 60, 1)

    _print_ok(f"build {build_id} {build_status}, completed in {time_mins} mins")


@click.command()
@click.option("--host", default=None, required=True, help="gcp host or ip address")
@click.option("--user", default="", required=False, help="gcp ssh username")
@click.pass_context
def deploy(ctx, host: str, user: str):
    time_start_unix = time.time()

    print("host reboot", end=" ... ")

    code = _ssh_reboot(host=host, user=user)

    _print_ok("ok")

    print("host wait")
    time.sleep(3)

    # wait for host
    print("host check", end=" ... ")

    timeout = 0
    while timeout < DEFAULT_SSH_CHECK_TIMEOUT:
        code = _ssh_check(host=host, user=user)
        if code == 0:
            break
        time.sleep(DEFAULT_SSH_CHECK_INTERVAL)
        timeout += DEFAULT_SSH_CHECK_INTERVAL

    _print_ok(f"ok, {code}")

    print("host scp files", end=" ... ")

    code = _scp_files(host=host, user=user, files=[".env.db.prod", ".env.prod"])

    if code != 0:
        _print_error(f"error {code}")
        exit(code)

    _print_ok("ok")

    print("docker network", end=" ... ")

    code = _docker_network_create(host=host, user=user)

    if code not in [0,1]:
        _print_error(f"error {code}")
        exit(code)

    _print_ok("ok")

    print("docker postgres", end=" ... ")

    code = _docker_postgres_start(host=host, user=user)

    if code not in [0,125]:
        _print_error(f"error {code}")
        exit(code)

    _print_ok("ok")

    print("docker migrate", end=" ... ")

    code = _docker_postgres_migrate(host=host, user=user)

    if code not in [0]:
        _print_error(f"error {code}")
        exit(code)

    _print_ok("ok")

    print("docker app", end=" ... ")

    code = _docker_app_start(host=host, user=user)

    if code not in [0,125]:
        _print_error(f"error {code}")
        exit(code)

    time_end_unix = time.time()
    time_mins = round((time_end_unix - time_start_unix) / 60, 1)

    _print_ok(f"ok, completed in {time_mins} mins")


def _docker_app_start(host: str, user: str) -> int:
    ssh_code = subprocess.run(
        f"ssh -t {user}@{host} 'docker run --name notme-elixir-prd --network notme -d --rm -p 80:4000 --env-file .env.prod gcr.io/notme-330419/notme-elixir:latest'",
        shell=True,
    ).returncode

    return ssh_code


def _docker_postgres_migrate(host: str, user: str) -> int:
    ssh_code = subprocess.run(
        f"ssh -t {user}@{host} 'docker run --network notme -d --rm --env-file .env.prod gcr.io/notme-330419/notme-elixir:latest /app/bin/migrate'",
        shell=True,
    ).returncode

    return ssh_code


def _docker_postgres_start(host: str, user: str) -> int:
    ssh_code = subprocess.run(
        f"ssh -t {user}@{host} 'docker run --name postgres-prd --network notme -d --rm --env-file .env.db.prod postgis/postgis:16-3.4'",
        shell=True,
    ).returncode

    return ssh_code


def _docker_network_create(host: str, user: str) -> int:
    ssh_code = subprocess.run(
        f"ssh -t {user}@{host} 'docker network create --driver bridge notme'",
        shell=True,
    ).returncode

    return ssh_code


def _gcp_build_poll(project: str, id: str) -> str:
    cmd = f"gcloud builds describe {id} --format=json"
    
    while True:
        result = subprocess.run(cmd.split(" "), check=True, capture_output=True)
        result_dict = json.loads(result.stdout.decode("utf-8"))
        build_status = result_dict.get("status", "error").lower()

        _print_status(f"gcp build id {id} - status {build_status} ...")

        # check for terminal state
        if build_status in ["error", "success"]:
            return build_status

        time.sleep(DEFAULT_BUILD_CHECK_INTERVAL)


def _gcp_build_trigger(project: str, sha: str) -> str:
    print(f"gcp build trigger project '{project}'", end=" ... ")

    cmd = f"gcloud builds triggers run {project} --format=json"

    result = subprocess.run(cmd.split(" "), check=True, capture_output=True)
    result_dict = json.loads(result.stdout.decode("utf-8"))
    build_id = result_dict.get("metadata").get("build").get("id")

    _print_ok(f"ok, created {build_id}")

    return build_id


def _scp_files(host: str, user: str, files: list[str]) -> int:
    for file in files:
        scp_code = subprocess.run(
            f"scp {file} {user}@{host}:{file}",
            shell=True,
        ).returncode

        if scp_code != 0:
            return scp_code

    return 0


def _ssh_check(host: str, user: str) -> int:
    ssh_code = subprocess.run(
        f"ssh -t {user}@{host} 'ls'",
        shell=True,
    ).returncode

    return ssh_code


def _ssh_reboot(host: str, user: str) -> int:
    ssh_code = subprocess.run(
        f"ssh -t {user}@{host} 'sudo reboot'",
        shell=True,
    ).returncode

    return ssh_code


def _print_error(s: str):
    print("\x1b[1;31m" + s + "\x1b[0m")


def _print_ok(s: str):
    print("\x1b[1;32m" + s + "\x1b[0m")


def _print_status(s: str):
    print("\x1b[1;36m" + s + "\x1b[0m")



cli.add_command(build)
cli.add_command(deploy)

if __name__ == "__main__":
    cli()